@page "/todolist"
@inject HttpClient Http
@using ToDoListBlazor.Shared

<div class="container">
    <h3 class="text-center my-4">To-Do List</h3>

    <ul class="list-group">
        @foreach (var todo in todos)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                    <input type="checkbox" class="mr-2" checked="@todo.IsCompleted"
                        @onchange="(e) => UpdateTodoCompletion(todo, e)" />
                    @todo.Title
                </div>
                <button class="btn btn-danger btn-sm" @onclick="() => DeleteTodo(todo.Id)">Delete</button>
            </li>
        }
    </ul>

    <div class="input-group my-4">
        <input type="text" class="form-control" placeholder="New To-Do" @bind="newTodoTitle" />
        <div class="input-group-append">
            <button class="btn btn-success" @onclick="AddTodo">Add</button>
        </div>
    </div>
</div>

@code {
    private List<TodoItem> todos = new();
    private string newTodoTitle;

    protected override async Task OnInitializedAsync()
    {
        todos = await Http.GetFromJsonAsync<List<TodoItem>>("api/todo");
    }

    private async Task AddTodo()
    {
        Console.WriteLine("AddTodo method called."); // Debugging log

        try
        {
            var newTodo = new TodoItem { Title = newTodoTitle, IsCompleted = false };
            var response = await Http.PostAsJsonAsync("api/todo", newTodo);
            if (response.IsSuccessStatusCode)
            {
                todos = await Http.GetFromJsonAsync<List<TodoItem>>("api/todo");
                newTodoTitle = string.Empty;
                Console.WriteLine("Todo item added successfully.");
            }
            else
            {
                Console.WriteLine($"Error adding todo item: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private async Task UpdateTodoCompletion(TodoItem todo, ChangeEventArgs e)
    {
        todo.IsCompleted = (bool)e.Value;
        await UpdateTodo(todo);
    }

    private async Task UpdateTodo(TodoItem todo)
    {
        await Http.PutAsJsonAsync($"api/todo/{todo.Id}", todo);
    }

    private async Task DeleteTodo(string id)
    {
        await Http.DeleteAsync($"api/todo/{id}");
        todos = await Http.GetFromJsonAsync<List<TodoItem>>("api/todo");
    }
}
